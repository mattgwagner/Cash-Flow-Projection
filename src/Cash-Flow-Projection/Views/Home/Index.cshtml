@model Cash_Flow_Projection.Models.Dashboard

@{
    ViewData["Title"] = "Home Page";
}

<h3>
    <span class="update-balance badge badge-success" data-account="cash" data-current="@Model.CheckingBalance">Cash @Html.DisplayFor(model => model.CheckingBalance)</span>
    <span class="update-balance badge badge-danger" data-account="credit" data-current="@Model.CreditBalance">Credit @Html.DisplayFor(model => model.CreditBalance)</span>
    <span class="update-balance badge badge-warning" data-account="business" data-current="@Model.BusinessBalance">Business @Html.DisplayFor(model => model.BusinessBalance)</span>
</h3>

<h6><span class="badge badge-default">Minimum Balance: @Html.DisplayFor(model => model.MinimumBalance)</span></h6>

<hr />

<div id="chart_div"></div>

<hr />

<table class="table table-striped table-responsive-sm">
    <thead class="thead-dark">
        <tr>
            <th>Date</th>
            <th>Account</th>
            <th>Description</th>
            <th>Amount</th>
            <th>Checking</th>
            <th>Credit</th>
            <th>Business</th>
            <th>Actions</th>
        </tr>
    </thead>

    @foreach (var entry in Model.Rows)
    {
        <tr class="@entry.RowClass">
            <td>@Html.DisplayFor(_ => entry.Date)</td>
            <td>
                @switch (entry.Account)
                {
                    case Cash_Flow_Projection.Models.Account.Cash:
                        <span class="badge badge-success">Cash</span>
                        break;

                    case Cash_Flow_Projection.Models.Account.Credit:
                        <span class="badge badge-danger">Credit</span>
                        break;

                    case Cash_Flow_Projection.Models.Account.Business:
                        <span class="badge badge-warning">Business</span>
                        break;
                }
            </td>
            <td>@Html.DisplayFor(_ => entry.Description)</td>
            <td class="@entry.AmountClass">@Html.DisplayFor(_ => entry.Amount)</td>
            <td>
                @switch (entry.Account)
                {
                    case Cash_Flow_Projection.Models.Account.Cash:
                        <span>@Html.DisplayFor(_ => entry.CashBalance)</span>
                        break;
                }
            </td>
            <td>
                @switch (entry.Account)
                {
                    case Cash_Flow_Projection.Models.Account.Credit:
                        <span>@Html.DisplayFor(_ => entry.CreditBalance)</span>
                        break;
                }
            </td>
            <td>
                @switch (entry.Account)
                {
                    case Cash_Flow_Projection.Models.Account.Business:
                        <span>@Html.DisplayFor(_ => entry.BusinessBalance)</span>
                        break;
                }
            </td>

            <td>
                <div class="btn-group" role="group">
                    <a href="@Url.Action("MarkPaid", "Home", new { entry.id })" class="btn btn-success"><span class="fas fa-lg fa-check"></span></a>
                    <a href="@Url.Action("Postpone", "Home", new { entry.id })" class="btn btn-warning"><span class="fas fa-lg fa-clock"></span></a>

                    <div class="btn-group" role="group">
                        <span class="fas fa-lg fas-eraser"></span>
                        <button type="button" class="btn btn-danger dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <a href="#"><span class="fas fa-trash-alt"></span></a>
                        </button>
                        <div class="dropdown-menu">
                            @Html.ActionLink("This", "Delete", "Home", new { entry.id }, new { @class = "btn btn-danger" })
                            @Html.ActionLink("All", "DeleteMatching", "Home", new { entry.Description }, new { @class = "btn btn-danger" })
                            @Html.ActionLink("Following", "DeleteMatching", "Home", new { entry.Description, after = entry.Date }, new { @class = "btn btn-danger" })
                        </div>
                    </div>
            </td>
        </tr>
    }
</table>

<div class="modal fade" id="balanceModal" tabindex="-1" role="dialog" aria-labelledby="balanceModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="balanceModalLabel">Update Balance</h4>
            </div>
            @using (Html.BeginForm("Balance", "Home", FormMethod.Post))
            {
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <input type="text" name="account" id="account" hidden="hidden" />
                    <input type="text" name="balance" id="balance" placeholder="Balance" />
                </div>
                <div class="modal-footer">
                    <button type="submit">Update</button>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts
    {
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        var result = JSON.parse('@Html.Raw(Model.ChartData)');

        function drawChart() {
            // Create the data table.
            var data = new google.visualization.DataTable();

            data.addColumn('date', 'Date');
            data.addColumn('number', 'Cash ($)');
            data.addColumn('number', 'Credit ($)');
            data.addColumn('number', 'Business ($)');

            for (var i = 0; i < result.length; i++)
            {
                data.addRow([new Date(result[i].Date), result[i].CashBalance, result[i].CreditBalance, result[i].BusinessBalance]);
            }

            var options = {
                title: 'Projected Balance',
                legend: { position: 'bottom' },
                vAxis: { format: 'currency' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

            chart.draw(data, options);
        }
    </script>

    <script>
        $(document).on('click', '.update-balance', function () {
            $("#balance").val($(this).data('current'));
            $("#account").val($(this).data('account'));

            $("#balanceModal").modal();

            $('#balanceModal').on('shown.bs.modal', function () {
                $('#balance').focus()
            })
        });
    </script>
}