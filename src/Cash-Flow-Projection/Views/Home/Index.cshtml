@model Cash_Flow_Projection.Models.Dashboard

@{
    ViewData["Title"] = "Home Page";
}

<h3>Current Balance: @Html.DisplayFor(model => model.CurrentBalance) <div class="small">(as of @Html.DisplayFor(model => model.BalanceAsOf))</div></h3>

@using (Html.BeginForm("Balance", "Home", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <input type="text" name="balance" placeholder="Balance" />
    <button type="submit">Set</button>
}

<hr />

<div id="chart_div"></div>

<hr />

<table class="table table-striped">
    <thead>
        <tr>
            <th>Date</th>
            <th>Description</th>
            <th>Amount</th>
            <th>Balance</th>
            <th></th>
            <th></th>
        </tr>
    </thead>

    @foreach (var entry in Model.Entries.Where(_ => !_.IsBalance).OrderBy(_ => _.Date))
    {
        var income = entry.Amount > 0 ? "success" : "";

        var balance = Cash_Flow_Projection.Models.Balance.GetBalanceOn(Model.Entries, entry.Date);

        var contextual = balance < 0 ? "danger" : balance < 500 ? "warning" : "";

        <tr class="@contextual">
            <td>@Html.DisplayFor(_ => entry.Date)</td>
            <td>@Html.DisplayFor(_ => entry.Description)</td>
            <td class="@income">@Html.DisplayFor(_ => entry.Amount)</td>
            <td>@balance.ToString("C")</td>
            <td>
                @using (Html.BeginForm("Postpone", "Home", new { entry.id }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-default">Postpone</button>
                }
            </td>
            <td>
                @using (Html.BeginForm("Delete", "Home", new { entry.id }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete</button>
                }
            </td>
        </tr>
    }
</table>

@section Scripts
{
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        var result = JSON.parse('@Html.Raw(Model.ChartData)');

        function drawChart() {
            // Create the data table.
            var data = new google.visualization.DataTable();

            data.addColumn('date', 'Date');
            data.addColumn('number', 'Balance ($)');

            for (var i = 0; i < result.length; i++)
            {
                data.addRow([new Date(result[i].Date), result[i].Balance]);
            }

            var options = {
                title: 'Projected Balance',
                legend: { position: 'bottom' },
                vAxis: { format: 'currency' }
            };

            var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

            chart.draw(data, options);
        }
    </script>
}