@using Cash_Flow_Projection.Models

@inject Cash_Flow_Projection.Models.Database db

<table class="table">
    <tbody>
        @foreach (var row in Rows)
        {
            <tr class="@row.RowClass">
                <td>@row.Date</td>
                <td>@row.Description</td>
                <td>@row.Amount</td>
                <td>
                    @switch (row.Account)
                    {
                        case Cash_Flow_Projection.Models.Account.Cash:
                            <span class="badge badge-success">Cash</span>
                            break;

                        case Cash_Flow_Projection.Models.Account.Credit:
                            <span class="badge badge-danger">Credit</span>
                            break;

                        case Cash_Flow_Projection.Models.Account.Business:
                            <span class="badge badge-warning">Business</span>
                            break;
                    }
                </td>
                <td>
                    <input type="button" @onclick="@(_ => MarkComplete(row.id))" value="Mark Complete" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<Cash_Flow_Projection.Models.Dashboard.Row> Rows { get; set; }

    private async Task Refresh()
    {
        var dash = new Dashboard(db);

        Rows = dash.Rows.ToList();
    }

    private async Task MarkComplete(string id)
    {
        // Get the latest balance, update for the item getting marked paid, update balance

        var entry = db.Entries.Single(_ => _.id == id);

        var balance =
            db
            .Entries
            .GetLastBalanceEntry(entry.Account)?
            .Amount
            ?? Decimal.Zero;

        db.Entries.Remove(entry);

        await db.SaveChangesAsync();

        await Refresh();
    }
}
