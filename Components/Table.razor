@using Cash_Flow_Projection.Models

@inject Cash_Flow_Projection.Models.Database db

<h3>
    <span class="update-balance badge badge-success" data-account="cash" data-current="@Model.CheckingBalance">Cash @($"{Model.CheckingBalance:c}")</span>
    <span class="update-balance badge badge-danger" data-account="credit" data-current="@Model.CreditBalance">Credit @($"{Model.CreditBalance:c}")</span>
    <span class="update-balance badge badge-warning" data-account="business" data-current="@Model.BusinessBalance">Business @($"{Model.BusinessBalance:c}")</span>
</h3>

<h6><span class="badge badge-default">Minimum Balance: @($"{Model.MinimumBalance:c}")</span></h6>

<hr />

<table class="table table-striped table-responsive-sm">
    <thead class="thead-dark">
        <tr>
            <th>Date</th>
            <th>Description</th>
            <th>Amount</th>
            <th>Account</th>
            <th>Actions</th>
            <th>Checking</th>
            <th>Credit</th>
            <th>Business</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var row in Model.Rows.ToList())
        {
            <Cash_Flow_Projection.Components.Row Data="@row" OnClickCallback="OnParametersSetAsync" />
        }
    </tbody>
</table>

<a href="/?Thru=@more">Load More</a>

@code {
    [Parameter]
    public DateTime Thru { get; set; }

    private DateTime more => Thru.AddMonths(1);

    private Dashboard Model;

    protected override void OnParametersSet()
    {
        Model = new Dashboard(db, Thru);
    }
}